{
  "ID": "170",
  "post_author": "130",
  "post_date": "2007-08-25 16:19:06",
  "post_date_gmt": "2007-08-25 21:19:06",
  "post_content": "<a href=\"http://www.paulgraham.com/head.html\">Holding a Program in One's Head</a>\r\n\r\n\r\n\r\n<blockquote>In fact, if you look at the way software gets written in most organizations, it's almost as if they were deliberately trying to do things wrong. In a sense, they are. One of the defining qualities of organizations since there have been such a thing is to treat individuals as interchangeable parts. This works well for more parallelizable tasks, like fighting wars. For most of history a well-drilled army of professional soldiers could be counted on to beat an army of individual warriors, no matter how valorous. But having ideas is not very parallelizable. And that's what programs are: ideas.</blockquote>\r\n\r\n\r\nAnd some interesting thoughts from the <a href=\"http://news.ycombinator.com/item?id=45698\">comments</a>:\r\n\r\n\r\n\r\n<blockquote>One possible alternative organization pattern is the \"band.\" ...\r\n\r\nIt would be interesting to see how a band-style organization would apply towards more practical software products. Software so produced would come in boxes with the band's logo, but more importantly, a _list of credits_, anecdotes about the software's creation, etc. That is, to make the delivery of the software more _human_.\r\n\r\nBack in the day, when credits on software were more commonplace, it was possible to judge the quality of a product (to some extent) based on who was involved with it. Some people became reknowned coders, reknowned technical writers, etc. I think it gave two incentives: first, your name is going on the box of that package -- this gave prestige in the community post-sale; second, it allowed the customers to predict the overall feel of the software prior to actually purchasing it, based on their experiences with software written by the same or similar authors.</blockquote>\r\n\r\n<br/>\r\n\r\n<blockquote>The only part I don't really agree with is the implicit condemnation of programming done by large companies. Yes, their methods result in mediocre software, but that's often what you want. There's a reason they try to treat programmers as interchangeable cogs, and resist having an entire program in one person's head.\r\n\r\nTo use the tired \"building a house\" metaphor - you can get a renowned architect to design the next landmark in a city, or you can get mediocre, interchangeable architects to design a row of townhouses. Both approaches are valid and have their own place, but there's no point asking the famous architect to build townhouses.</blockquote>\r\n\r\n\r\n\r\n",
  "post_title": "Paul Graham is spot on (as always)",
  "post_category": "0",
  "post_excerpt": "",
  "post_lat": null,
  "post_lon": null,
  "post_status": "publish",
  "comment_status": "open",
  "ping_status": "open",
  "post_password": "",
  "post_name": "paul-graham-is-spot-on-as-always",
  "to_ping": "",
  "pinged": "",
  "post_modified": "2007-08-25 16:21:18",
  "post_modified_gmt": "2007-08-25 21:21:18",
  "post_content_filtered": "",
  "post_parent": "0",
  "guid": "http://www.timmfin.net/2007/08/25/paul-graham-is-spot-on-as-always/",
  "menu_order": "0",
  "post_type": "post",
  "post_mime_type": "",
  "comment_count": "1"
}
